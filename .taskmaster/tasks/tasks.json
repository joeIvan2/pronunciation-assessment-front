{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Jest and React Testing Library",
        "description": "Configure Jest and React Testing Library for unit testing hooks and component logic. This establishes the foundation for M1 - Test Baseline.",
        "details": "Install necessary packages: `jest`, `@testing-library/react`, `@testing-library/jest-dom`, `@testing-library/hooks`. Create `jest.config.js` and a `setupTests.js` file. Ensure the `npm run test` script is configured in `package.json` to execute Jest.",
        "testStrategy": "Run `npm run test` and confirm it executes without errors, discovering and running a sample test file. The initial run should show a green light, indicating the setup is correct.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Setup Playwright for E2E Testing",
        "description": "Install and configure Playwright for end-to-end and visual regression testing. This is a critical part of the M1 - Test Baseline.",
        "details": "Run `npx playwright install` to add Playwright to the project and install browser binaries. Create a `playwright.config.ts` file. Configure the project settings, including the base URL (`http://localhost:3000`) and screenshot options.",
        "testStrategy": "Execute `npx playwright test --ui` to verify that the Playwright UI opens and can connect to the local development server. This confirms the basic setup is functional.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Write Baseline Playwright E2E Test Script",
        "description": "Create the initial E2E test script `playwright-test.js` that covers the primary user flow: start recording, stop recording, submit for assessment, and verify that a score is displayed.",
        "details": "Based on '附錄 A', create `tests/playwright-test.js`. The script should navigate to the page, click the '開始錄音' button, wait for a few seconds, click '結束並送出', and then assert that the element with `data-testid='score-value'` contains a number. Use `getByRole` and `getByTestId` for robust selectors.\n<info added on 2025-07-03T07:01:38.077Z>\n已完成基準測試腳本創建，包含以下功能：\n\n完成項目：\n1. 創建了 `tests/playwright-test.js` 基準測試腳本\n2. 實現了認證狀態管理功能，包括：\n   - 自動檢查登入狀態\n   - 手動登入模式（5分鐘等待）\n   - Cookie 保存和載入機制\n3. 更新了 `.gitignore` 排除認證文件\n4. 更新了 `playwright.config.js` 支援新測試文件\n5. 在 `package.json` 添加了專用測試腳本：\n   - npm run test:baseline - 基準測試\n   - npm run test:auth - 認證狀態檢查\n   - npm run test:login - 手動登入模式\n   - npm run test:logged-in - 登入後功能測試\n6. 創建了詳細的測試使用指南 `tests/README.md`\n\n測試執行結果：\n- 測試腳本能被 Playwright 正確識別和執行\n- 頁面載入和文字輸入功能正常\n- 找不到「開始錄音」按鈕，選擇器需要調整\n\n發現的問題：\n- 按鈕選擇器 `button:has-text(\"開始錄音|開始|Start\")` 無法找到實際按鈕\n- 可能需要先點擊「發音評分」選項才能顯示錄音按鈕\n- 部分瀏覽器（Firefox、Safari）未安裝\n\n下一步：\n需要檢查實際頁面結構，調整按鈕選擇器，確保測試流程符合實際的用戶操作順序。\n</info added on 2025-07-03T07:01:38.077Z>",
        "testStrategy": "Run `npx playwright test tests/playwright-test.js` against the original, un-refactored component. The test must pass, confirming the script correctly automates the user flow.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Generate Baseline CSS Snapshots",
        "description": "Generate the first set of CSS snapshots using the baseline Playwright test. These images will serve as the visual ground truth against which all future changes are compared.",
        "details": "Add `await expect(page).toHaveScreenshot();` to the end of the `playwright-test.js` script. Run the test once with the `--update-snapshots` flag to create the initial `.png` files. These files must be committed to the repository.",
        "testStrategy": "Verify that the snapshot images have been created in the designated snapshot directory. Manually inspect the first snapshot to ensure it captures the component correctly without any visual glitches.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Create GitHub Actions CI Workflow",
        "description": "Create a GitHub Actions workflow file to automate the testing process on every pull request.",
        "details": "Create a file at `.github/workflows/ci.yml`. Define a job that triggers on `pull_request`. The job should include steps for checking out the code, setting up Node.js, and installing dependencies using `npm install`.",
        "testStrategy": "Push a test PR with the new workflow file. Verify that the GitHub Action triggers and successfully completes the checkout and installation steps.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Integrate Jest Unit Tests into CI",
        "description": "Integrate Jest unit tests into the CI workflow. The workflow should fail if any unit test fails or if coverage drops below the required threshold.",
        "details": "Add a step to the `ci.yml` file: `run: npm run test -- --coverage`. Configure Jest to output coverage reports and set the coverage threshold to 70% as per the PRD's gate-keeping conditions. A failure in this step should fail the entire workflow.",
        "testStrategy": "Submit a PR with a failing unit test to confirm the CI job fails as expected. Then, fix the test and submit another PR to ensure it passes.",
        "priority": "high",
        "dependencies": [
          1,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Integrate Playwright E2E & Visual Tests into CI",
        "description": "Integrate Playwright E2E and visual regression tests into the CI workflow. This is the primary gate to prevent functional or visual regressions.",
        "details": "Add a step to `ci.yml` to install Playwright browsers (`npx playwright install`). Add another step `run: npm run test:e2e`. The workflow must be configured to fail if `playwright-test.js` fails or if the CSS snapshot diff is not zero. Use Playwright's sharding feature for parallel execution to manage test duration.",
        "testStrategy": "Submit a PR with a minor, intentional UI change (e.g., change a color). The CI build must fail at the Playwright step due to a non-zero snapshot diff. Revert the change and confirm the CI passes.",
        "priority": "high",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Define Shared TypeScript Types",
        "description": "Create a centralized file for shared TypeScript types related to speech assessment to ensure type safety across all new hooks and components.",
        "details": "Create the file `types/speech.ts`. Define interfaces for the assessment payload, score results, word-level details (e.g., `Phoneme`, `Word`), and overall API responses. Example: `interface Score { accuracy: number; fluency: number; completeness: number; }`.",
        "testStrategy": "Perform a code review to ensure the defined types accurately reflect the data structures used in the application and received from the backend API. These types will be validated implicitly by their usage in other tasks.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Create `packages/core` for Shared Logic",
        "description": "Create a new shared package for core logic that has no dependency on the DOM, making it portable for future platforms like Expo.",
        "details": "Set up a new directory `packages/core`. Initialize it as a local package, potentially using npm workspaces or a similar monorepo structure. This package will house the refactored hooks.",
        "testStrategy": "Verify that the main web application can successfully import a sample utility function from `packages/core`, confirming the package linkage is correct.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Create `useRecording` Hook",
        "description": "Extract all logic related to audio recording into a dedicated `useRecording` hook within `packages/core`.",
        "details": "Create `packages/core/src/useRecording.ts`. This hook will manage recording state (e.g., `isRecording`, `audioBlob`, `duration`). It should expose functions like `startRecording`, `stopRecording`. Use the Web Audio API (`MediaRecorder`) for implementation. The hook should be self-contained and have no UI dependencies.",
        "testStrategy": "Write unit tests for the `useRecording` hook using Jest and `@testing-library/react`. Test state transitions: initial state, starting recording, stopping recording, and handling errors.",
        "priority": "high",
        "dependencies": [
          1,
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Create `useUploadAndScore` Hook",
        "description": "Extract the logic for uploading the audio file and handling the scoring API response into a `useUploadAndScore` hook.",
        "details": "Create `packages/core/src/useUploadAndScore.ts`. This hook will manage API state (`isLoading`, `error`, `scoreData`). It will expose a single function, e.g., `getScore(audioBlob: Blob)`, which handles the `fetch` request to the backend. Use types from `types/speech.ts`.",
        "testStrategy": "Unit test the hook with Jest. Mock the `fetch` API to simulate successful responses, network errors, and API errors (e.g., 4xx/5xx status codes). Assert that the hook's state updates correctly in each case.",
        "priority": "high",
        "dependencies": [
          1,
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Refactor `RecorderPanel` Component",
        "description": "Refactor the `RecorderPanel` UI into a separate, reusable component file with its own Storybook story.",
        "details": "Create `components/RecorderPanel.tsx`. Move the relevant JSX and styles from `PronunciationAssessment.tsx` into this new file. The component will receive its state and callbacks via props. Create `components/RecorderPanel.stories.tsx` to render the component in isolation for visual testing.",
        "testStrategy": "Run Playwright E2E and visual regression tests. The snapshot diff must be zero. Manually verify the component's appearance and behavior in Storybook across different states (e.g., idle, recording).",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Refactor `ControlsBar` Component",
        "description": "Refactor the `ControlsBar` UI, which contains action buttons like 'Start' and 'Stop', into a separate component file with a Storybook story.",
        "details": "Create `components/ControlsBar.tsx`. Move the button elements and their layout from the main component. The new component will accept props for button states (e.g., `disabled`) and `onClick` handlers. Create `components/ControlsBar.stories.tsx` to document its different states.",
        "testStrategy": "The Playwright E2E test suite must pass with a zero snapshot diff. Check the Storybook story to ensure all button states (e.g., 'Start', 'Stop', 'Submit', 'Retry') render correctly.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Refactor `ScoreBar` Component",
        "description": "Refactor the `ScoreBar` UI, which displays the numerical scores, into a separate component file with a Storybook story.",
        "details": "Create `components/ScoreBar.tsx`. Move the JSX responsible for rendering accuracy, fluency, etc., into this file. The component will accept the score object (typed from `types/speech.ts`) as a prop. Create `components/ScoreBar.stories.tsx` to show the component with various example scores.",
        "testStrategy": "The Playwright E2E test suite must pass with a zero snapshot diff. Verify in Storybook that the component correctly displays different score values, including edge cases like zero or perfect scores.",
        "priority": "medium",
        "dependencies": [
          4,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Refactor `WordsDisplay` Component",
        "description": "Refactor the `WordsDisplay` UI, which shows the text to be read and word-level feedback, into a separate component file with a Storybook story.",
        "details": "Create `components/WordsDisplay.tsx`. Move the logic for rendering the list of words and highlighting them based on assessment results. The component will take the sentence and word-level score data as props. Create `components/WordsDisplay.stories.tsx`.",
        "testStrategy": "The Playwright E2E test suite must pass with a zero snapshot diff. Use Storybook to test different states, such as before assessment (plain text) and after assessment (words colored by accuracy).",
        "priority": "medium",
        "dependencies": [
          4,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Create `useAssessmentFlow` Orchestration Hook",
        "description": "Create a `useAssessmentFlow` hook to manage the overall application state and orchestrate the interactions between the recording and scoring hooks.",
        "details": "Create `hooks/useAssessmentFlow.ts`. This hook will use `useRecording` and `useUploadAndScore`. It will manage the overall state machine (e.g., 'IDLE', 'RECORDING', 'UPLOADING', 'SHOWING_RESULT'). It will provide the state and callbacks needed by the UI components. Consider using React Context or Zustand for state management.",
        "testStrategy": "Write comprehensive unit tests for this hook using Jest. Test the entire flow: calling the function to start recording should change state to 'RECORDING'; stopping should trigger the upload and scoring logic, eventually transitioning to 'SHOWING_RESULT'.",
        "priority": "high",
        "dependencies": [
          10,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Reassemble `PronunciationAssessment.tsx`",
        "description": "Reassemble the main `PronunciationAssessment.tsx` component using the newly created components and hooks. The final file size must be under 200 lines.",
        "details": "Rewrite `PronunciationAssessment.tsx`. It should now primarily consist of invoking `useAssessmentFlow` to get state and callbacks, and then passing those down as props to the new child components (`RecorderPanel`, `ControlsBar`, etc.). All complex logic should be absent from this file.",
        "testStrategy": "The ultimate validation: run the full Playwright E2E test suite (`npm run test:e2e`). It must pass, and the visual snapshot diff must be zero. Manually verify the line count of the file is under 200.",
        "priority": "high",
        "dependencies": [
          12,
          13,
          14,
          15,
          16
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Update Documentation and Final Review",
        "description": "Finalize the project by updating the documentation, including a new architecture diagram in the README, and ensuring all quality gates are met.",
        "details": "Update `README.md` to reflect the new modular architecture. Add a simple diagram showing how the hooks and components interact. Clean up any old code. Ensure the final PR passes all CI checks, including test coverage (>= 70%) and Playwright tests.",
        "testStrategy": "A final code review by the team lead. The PR must have a green checkmark from the CI workflow. The PR description must include the list of changed files and screenshots of passing tests as required by the gate-keeping conditions.",
        "priority": "medium",
        "dependencies": [
          6,
          7,
          17
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-03T04:01:54.349Z",
      "updated": "2025-07-03T08:06:01.903Z",
      "description": "Tasks for master context"
    }
  }
}